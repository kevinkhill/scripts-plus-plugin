
  function resolve(moduleId) {
    this.PATH = [
      env("APPS_PATH"),
      env("MODULES_PATH"),
      env("USER_MODULES_PATH")
    ];

    for (const dir of this.PATH) {
      const abspath = Path.Combine(dir, `${moduleId}.js`);

      if (env("SETTINGS").debug) {
        sp.MessageBox(abspath, "DEBUG:resolve");
      }

      if (File.Exists(abspath)) {
        const data = File.ReadAllText(abspath);

        if (data) {
          return { data, abspath, error: false };
        }
      }
    }

    sp.MessageBox(
      `"${moduleId}" was not found in the ScriptyPath.\n\n${this.PATH.join("\n")}`,
      "ScriptyStrokes __resolve() ERROR"
    );

    return {
      error: `"${moduleId}" was not found in the ScriptyPath.\n\n${this.PATH.join("\n")}`
    };
  }

  function naiveRequire(moduleId, dependencies = {}) {
    const file = resolve(moduleId);

    if (file.error) {
      return sp.MessageBox(file.error, "ScriptyStrokes naiveRequire() ERROR");
    }

    const SRC = `(function moduleLoader(stdlib) {
      const module = { exports: {} };

      ${file.data}

      module.exports["__MODULE_ID"] = "${moduleId}";
      module.exports["__MODULE_SRC"] = String.raw\`${file.abspath}\`;

      return module;
    })`;

    var newModule = eval(SRC)(dependencies);

    return newModule.exports;
  }